#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

typedef struct MATRIX
{
    int **data;
    int rows;
    int columns;
    double elapsedTime;
} MATRIX;
typedef struct THREAD_ARGUMENT
{
    MATRIX A,B;
    MATRIX *result;
    int row;
    int column;
} THREAD_ARGUMENT;



MATRIX* readMatrices();
int** fillMatrix(FILE *f, int rows, int columns);
void writeOutput(MATRIX *matrices);
void printMatrix(MATRIX matrix, char name);
void matrixMultiplication(MATRIX A, MATRIX B, MATRIX *C);
void evaluateElementByElement(MATRIX A, MATRIX B, MATRIX *C);
void* evaluateElementThread(void *ptr);
void evaluateRowByRow(MATRIX A, MATRIX B, MATRIX *C);
void* evaluateRowThread(void *ptr);
void calculateElement(MATRIX A, MATRIX B, MATRIX* C, int row, int column);


int main()
{
    MATRIX *matrices = readMatrices();
    if(matrices[0].columns != matrices[1].rows)
    {
        printf("Math Error: Size mismatch!\n");
        exit(0);
    }
    MATRIX* result = (MATRIX *)malloc(3 * sizeof(MATRIX));
    clock_t startTime, endTime;
    double elapsedTime;
    printf("\nMatrix multiplication using no threads\n");
    startTime = clock();
    matrixMultiplication(matrices[0], matrices[1], &result[0]);
    endTime = clock();
    elapsedTime = 1000000.0 * ((double) (endTime - startTime)) / CLOCKS_PER_SEC;
    result[0].elapsedTime = elapsedTime;
    printf("Elapsed time: %.0lf micro sec.\n", elapsedTime);
    printf("\nMatrix multiplication using a thread for each elememt\n");
    startTime = clock();
    evaluateElementByElement(matrices[0], matrices[1], &result[1]);
    endTime = clock();
    elapsedTime = 1000000.0 * ((double) (endTime - startTime)) / CLOCKS_PER_SEC;
    result[1].elapsedTime = elapsedTime;
    printf("Elapsed time: %.0lf micro sec.\n", elapsedTime);
    printf("\nMatrix multiplication using a thread for each row\n");
    startTime = clock();
    evaluateRowByRow(matrices[0], matrices[1], &result[2]);
    endTime = clock();
    elapsedTime = 1000000.0 * ((double) (endTime - startTime)) / CLOCKS_PER_SEC;
    result[2].elapsedTime = elapsedTime;
    printf("Elapsed time: %.0lf micro sec.\n", elapsedTime);
    return 0;
}


MATRIX* readMatrices()
{
    MATRIX  *matrices = (MATRIX *) malloc(2 * sizeof(MATRIX));
    FILE *f = fopen("file1.txt", "r");
    fscanf(f, "%d %d\n", &matrices[0].rows, &matrices[0].columns);
    matrices[0].data = fillMatrix(f, matrices[0].rows, matrices[0].columns);
    fscanf(f, "%d %d\n", &matrices[1].rows, &matrices[1].columns);
    matrices[1].data = fillMatrix(f, matrices[1].rows, matrices[1].columns);
    fclose(f);
    return matrices;
}

int** fillMatrix(FILE *f, int rows, int columns)
{
    int **matrix = (int**) malloc(rows * sizeof(int *));
    int *newRow;
    int i,j;
    for (i = 0; i < rows; i++)
    {
        newRow = (int*) malloc(columns * sizeof(int));
        for(j = 0; j < (columns-1) ; j++)
        {
            fscanf(f, "%d ", &newRow[j]);
        }
        fscanf(f, "%d\n", &newRow[j]);
        matrix[i] = newRow;
    }
    return matrix;
}


void printMatrix(MATRIX matrix, char name)
{
    int rows = matrix.rows;
    int columns = matrix.columns;
    printf("matrix %c (size: %d x %d)\n", name, rows, columns);
    int i, j;
    for (i = 0; i < rows; i++)
    {
        for (j = 0; j < columns; j++)
            printf("%d\t", matrix.data[i][j]);
        printf("\n");
    }
}



void matrixMultiplication(MATRIX A, MATRIX B, MATRIX *C)
{
    (*C).rows = A.rows;
    (*C).columns = B.columns;
    (*C).data = (int**) malloc(A.rows * sizeof(int*));
    int x, y;
    for (x = 0; x < A.rows; x++)
    {
        (*C).data[x] = (int*) malloc(B.columns * sizeof(int));
        for (y = 0; y < B.columns; y++)
        {
            calculateElement(A, B, C, x, y);
        }
    }
}

void evaluateElementByElement(MATRIX A, MATRIX B, MATRIX *C) {
    (*C).rows = A.rows;
    (*C).columns = B.columns;
    (*C).data = (int **) malloc(A.rows * sizeof(int *));
    int x, y;
    int z = 0;
    int threadsCount = A.rows * B.columns;
    pthread_t threads[threadsCount];
    for (x = 0; x < A.rows; x++) {
        (*C).data[x] = (int *) malloc(B.columns * sizeof(int));
        for (y = 0; y < B.columns; y++) {
            THREAD_ARGUMENT *args = (THREAD_ARGUMENT *) malloc(sizeof(THREAD_ARGUMENT));
            (*args).A = A;
            (*args).B = B;
            (*args).result = C;
            (*args).row = x;
            (*args).column = y;
            pthread_create(&threads[z], NULL, evaluateElementThread, (void *) args);
            z++;
        }
    }
    for (z = 0; z < threadsCount; z++) {
        pthread_join(threads[z], NULL);
    }
}

void* evaluateElementThread(void *ptr)
{
    THREAD_ARGUMENT data = *((THREAD_ARGUMENT *) ptr);
    (*data.result).data[data.row][data.column] = 0;
    int i;
    for (i = 0; i < data.A.columns; i++)
    {
        (*(data.result)).data[data.row][data.column] += data.A.data[data.row][i] * data.B.data[i][data.column];
    }

    return NULL;
}

void evaluateRowByRow(MATRIX A, MATRIX B, MATRIX *C)
{
    (*C).rows = A.rows;
    (*C).columns = B.columns;
    (*C).data = (int**) malloc(A.rows * sizeof(int*));
    int x;
    int threadsCount = A.rows;
    pthread_t threads[threadsCount];
    for (x = 0; x < A.rows; x++)
    {
        (*C).data[x] = (int*) malloc(B.columns * sizeof(int));
        THREAD_ARGUMENT *args = (THREAD_ARGUMENT *) malloc(sizeof(THREAD_ARGUMENT));
        (*args).A = A; (*args).B = B; (*args).result = C; (*args).row = x;
        pthread_create(&threads[x], NULL, evaluateRowThread, (void*) args);
    }
    for(x = 0; x < threadsCount; x++)
    {
        pthread_join(threads[x], NULL);
    }
}

void* evaluateRowThread(void *ptr)
{
    THREAD_ARGUMENT args = *((THREAD_ARGUMENT *) ptr);
    int i, j;
    for (i = 0; i < args.B.columns; i++)
    {
        (*args.result).data[args.row][i] = 0;
        for (j = 0; j < args.B.rows; j++)
        {
            (* args.result).data[args.row][i] += args.A.data[args.row][j] * args.B.data[j][i];
        }
    }
    return NULL;
}

void calculateElement(MATRIX A, MATRIX B, MATRIX* C, int row, int column)
{
    (*C).data[row][column] = 0;
    int i;
    for (i = 0; i < A.columns; i++)
    {
        (*C).data[row][column] += A.data[row][i] * B.data[i][column];
    }
}